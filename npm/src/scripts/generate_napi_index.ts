// Copyright 2023 the Deno authors. All rights reserved. MIT license.

import { NAPI_FUNCTIONS } from "../napi_based.ts";

export function generateNapiIndex(
  { napiPackageName, napiArtifactName }: {
    napiPackageName: string;
    napiArtifactName: string;
  },
) {
  return template(NAPI_FUNCTIONS, napiPackageName, napiArtifactName);
}

export const template = (
  napiFunctions: string[],
  napiPackageName: string,
  napiArtifactName: string,
) => `
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

/* auto-generated by generate_napi_index.ts, based on auto-generated index.js in NAPI-RS */

const { existsSync, readFileSync } = require('fs')
const { join } = require('path')

const { platform, arch } = process

let nativeBinding = null
let localFileExisted = false
let loadError = null

function isMusl() {
  // For Node 10
  if (!process.report || typeof process.report.getReport !== 'function') {
    try {
      const lddPath = require('child_process').execSync('which ldd').toString().trim()
      return readFileSync(lddPath, 'utf8').includes('musl')
    } catch (e) {
      return true
    }
  } else {
    const { glibcVersionRuntime } = process.report.getReport().header
    return !glibcVersionRuntime
  }
}

switch (platform) {
  case 'win32':
    switch (arch) {
      case 'x64':
        localFileExisted = existsSync(join(__dirname, '${napiArtifactName}.win32-x64-msvc.node'))
        try {
          if (localFileExisted) {
            nativeBinding = require('./${napiArtifactName}.win32-x64-msvc.node')
          } else {
            nativeBinding = require('${napiPackageName}-win32-x64-msvc')
          }
        } catch (e) {
          loadError = e
        }
        break
      default:
        throw new Error(\`Unsupported architecture on Windows: \${arch}\`)
    }
    break
  case 'darwin':
    switch (arch) {
      case 'x64':
        localFileExisted = existsSync(join(__dirname, '${napiArtifactName}.darwin-x64.node'))
        try {
          if (localFileExisted) {
            nativeBinding = require('./${napiArtifactName}.darwin-x64.node')
          } else {
            nativeBinding = require('${napiPackageName}-darwin-x64')
          }
        } catch (e) {
          loadError = e
        }
        break
      case 'arm64':
        localFileExisted = existsSync(join(__dirname, '${napiArtifactName}.darwin-arm64.node'))
        try {
          if (localFileExisted) {
            nativeBinding = require('./${napiArtifactName}.darwin-arm64.node')
          } else {
            nativeBinding = require('${napiPackageName}-darwin-arm64')
          }
        } catch (e) {
          loadError = e
        }
        break
      default:
        throw new Error(\`Unsupported architecture on macOS: \${arch}\`)
    }
    break
  case 'linux':
    switch (arch) {
      case 'x64':
        if (isMusl()) {
            throw new Error(\`Unsupported architecture on Linux: \${arch} (musl)\`)
        } else {
          localFileExisted = existsSync(join(__dirname, '${napiArtifactName}.linux-x64-gnu.node'))
          try {
            if (localFileExisted) {
              nativeBinding = require('./${napiArtifactName}.linux-x64-gnu.node')
            } else {
              nativeBinding = require('${napiPackageName}-linux-x64-gnu')
            }
          } catch (e) {
            loadError = e
          }
        }
        break
      default:
        throw new Error(\`Unsupported architecture on Linux: \${arch}\`)
    }
    break
  default:
    throw new Error(\`Unsupported OS: \${platform}, architecture: \${arch}\`)
}

if (!nativeBinding) {
  if (loadError) {
    throw loadError
  }
  throw new Error(\`Failed to load native binding\`)
}

const { ${napiFunctions.join(", ")} } = nativeBinding

${napiFunctions.map((v) => `module.exports.${v} = ${v}`).join("\n")}
`;
